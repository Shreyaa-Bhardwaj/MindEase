library(tidyverse)
library(caret)
library(xgboost)
library(smotefamily)
library(Matrix)
library(ggplot2)
library(pROC)
library(reshape2)

data <- read.csv(file_path)

colnames(data)[which(names(data) == "Stress_Category")] <- "Stress_Level"
data <- na.omit(data)
data <- data %>% mutate_if(is.character, as.factor)

target <- as.factor(data$Stress_Level)

data_for_plot <- data
data_for_plot$Stress_Level <- target
num_cols <- sapply(data_for_plot, is.numeric)
num_features <- names(data_for_plot)[num_cols]

for (col in head(num_features, 3)) {
  print(
    ggplot(data_for_plot, aes(x = Stress_Level, y = .data[[col]], fill = Stress_Level)) +
      geom_boxplot() +
      theme_minimal() +
      labs(title = paste("Boxplot of", col, "by Stress Level"),
           x = "Stress Level", y = col)
  )
}

stress_HL <- filter(data_for_plot, Stress_Level %in% c("High", "Low"))

for (col in num_features) {
  high_vals <- stress_HL[[col]][stress_HL$Stress_Level == "High"]
  low_vals  <- stress_HL[[col]][stress_HL$Stress_Level == "Low"]
  t_test_result <- t.test(high_vals, low_vals)
  cat(paste("\nT-test for", col, ": p-value =", round(t_test_result$p.value, 4)))
}


z_scores <- scale(data_for_plot[, num_cols])
z_scores_df <- as.data.frame(z_scores)
outlier_count <- apply(z_scores_df, 2, function(col) sum(abs(col) > 3))
cat("\n\nOutliers (|z| > 3) per feature:\n")
print(outlier_count)


cor_matrix <- cor(data[, num_cols])
cor_melt <- melt(cor_matrix)

ggplot(cor_melt, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1)) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "ðŸ”— Correlation Heatmap of Numeric Features", x = "", y = "")


data <- data %>% select(-Occupation, -Recent.Major.Life.Event, -Medication)


data$Stress_Level <- NULL
data_matrix <- model.matrix(~ ., data = data)[, -1]


data_full <- data.frame(data_matrix, label = target)


set.seed(123)
smote_result <- SMOTE(data_full[, -ncol(data_full)], data_full$label, K = 5)
balanced_data <- smote_result$data
balanced_data$label <- as.factor(balanced_data$class)
balanced_data$class <- NULL


set.seed(123)
train_idx <- createDataPartition(balanced_data$label, p = 0.8, list = FALSE)
train <- balanced_data[train_idx, ]
test <- balanced_data[-train_idx, ]

dtrain <- xgb.DMatrix(data = as.matrix(train[, -ncol(train)]), label = as.numeric(train$label) - 1)
dtest  <- xgb.DMatrix(data = as.matrix(test[, -ncol(test)]),  label = as.numeric(test$label) - 1)


params <- list(
  objective = "multi:softmax",
  num_class = length(levels(target)),
  eval_metric = "merror",
  eta = 0.1,
  max_depth = 6,
  subsample = 0.8,
  colsample_bytree = 0.8
)

model <- xgb.train(params, dtrain, nrounds = 200, watchlist = list(val = dtest), verbose = 0)


preds <- predict(model, dtest)
accuracy <- mean(preds == as.numeric(test$label) - 1)
cat("\nâœ… Final Accuracy after SMOTE + XGBoost:", round(accuracy * 100, 2), "%\n")


label_levels <- levels(target)
predicted_labels <- factor(label_levels[preds + 1], levels = label_levels)

suggestions <- sapply(predicted_labels, function(level) {
  switch(level,
         "High" = "Daily meditation, reduce caffeine, seek professional help.",
         "Medium" = "Exercise regularly, maintain sleep hygiene.",
         "Low" = "Continue healthy habits and self-awareness.")
})

results <- data.frame(
  Actual = test$label,
  Predicted = predicted_labels,
  Suggestion = suggestions
)

print(head(results, 10))


cat("\nðŸ“Š Confusion Matrix and Class Metrics:\n")
conf_mat <- confusionMatrix(predicted_labels, test$label)
print(conf_mat)


cat("\nðŸ“ˆ Precision, Recall, and F1-Score:\n")
metrics <- data.frame(conf_mat$byClass)
print(metrics[, c("Precision", "Recall", "F1")])


ggplot(results, aes(x = Predicted, fill = Predicted)) +
  geom_bar() +
  theme_minimal() +
  labs(title = "Distribution of Predicted Stress Levels", x = "Stress Level", y = "Count")


cm <- table(results$Actual, results$Predicted)
cm_df <- as.data.frame(cm)
colnames(cm_df) <- c("Actual", "Predicted", "Freq")

ggplot(cm_df, aes(x = Actual, y = Predicted, fill = Freq)) +
  geom_tile(color = "white") +
  geom_text(aes(label = Freq), vjust = 1.5, color = "black", size = 5) +
  scale_fill_gradient(low = "white", high = "steelblue") +
  labs(title = "Confusion Matrix Heatmap") +
  theme_minimal()


