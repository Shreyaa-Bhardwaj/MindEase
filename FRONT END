library(shiny)
library(bslib)
library(randomForest)
library(plotly)


model <- readRDS("models/stress_model.rds")
scaling_params <- readRDS("models/scaling_params.rds")
means <- scaling_params$means
sds   <- scaling_params$sds


get_recommendation <- function(stress_level) {
  lvl <- as.numeric(as.character(stress_level))
  if (lvl <= 3) {
    "You're doing great! Keep up balanced sleep, exercise, and hydration. üòä"
  } else if (lvl <= 6) {
    "Light meditation and daily activity can help‚Äîreduce caffeine too. üòå"
  } else if (lvl <= 8) {
    "High stress‚Äîtry deep breaths, limit screen time, seek social support. üßò"
  } else {
    "Critical stress detected‚Äîconsult a counselor and prioritize sleep. ‚ù§"
  }
}


ui <- fluidPage(
  theme = bs_theme(bootswatch = "darkly", version = 4),
  tags$head(
    tags$meta(name = "viewport", content = "width=device-width, initial-scale=1"),
    tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css")
  ),
  
  titlePanel(
    title = div(
      HTML('<i class="bi bi-heart-pulse-fill"></i>'),
      strong(" MindEase: AI Stress Predictor")
    )
  ),

  br(),
  
  fluidRow(
    column(
      width = 12, align = "center",
      p("üßò Enter your health & lifestyle data to get a stress level prediction along with smart recommendations.")
    )
  ),
  
  fluidRow(
    column(
      width = 12, md = 4, offset = 1,
      div(class = "card bg-dark text-light p-3 shadow",
        h4(HTML('<i class="bi bi-person-fill"></i>'), " Your Information"),
        numericInput("age",       "Age",                    value = 30, min = 10, max = 100),
        numericInput("sleep",     "Sleep Hours",            value = 7,  min = 0,  max = 24),
        numericInput("caffeine",  "Caffeine Intake (mg/day)", value = 200, min = 0),
        numericInput("activity",  "Physical Activity (hrs/week)", value = 3, min = 0),
        numericInput("heartrate", "Heart Rate (bpm)",        value = 70,  min = 30, max = 200),
        numericInput("breathing", "Breathing Rate (breaths/min)", value = 16, min = 5, max = 40),
        br(),
        actionButton("predict", "üîç Predict My Stress", class = "btn btn-primary btn-block"),
        actionButton("reset", "‚ôª Reset Log", class = "btn btn-outline-light btn-block mt-2")
      )
    ),
    
    column(
      width = 12, md = 6,
      div(class = "card bg-secondary text-white p-4 shadow", style = "min-height: 420px;",
        h4(HTML('<i class="bi bi-graph-up-arrow"></i>'), " Prediction & Recommendation"),
        verbatimTextOutput("result", placeholder = TRUE),
        br(),
        plotlyOutput("stress_chart")
      )
    )
  ),

  br(),
  hr(),
  fluidRow(
    column(
      width = 12, align = "center",
      tags$small("üí° Built by Team MindEase ‚Ä¢ Powered by R & Shiny")
    )
  )
)


server <- function(input, output, session) {
 
  stress_log <- reactiveVal(data.frame(Time = character(), Stress = numeric(), stringsAsFactors = FALSE))

  observeEvent(input$predict, {
    new_data <- data.frame(
      Age                          = input$age,
      Sleep.Hours                  = input$sleep,
      Caffeine.Intake..mg.day.     = input$caffeine,
      Physical.Activity..hrs.week. = input$activity,
      Heart.Rate..bpm.             = input$heartrate,
      Breathing.Rate..breaths.min. = input$breathing
    )
    scaled  <- as.data.frame(scale(new_data, center = means, scale = sds))
    pred    <- predict(model, scaled)
    rec     <- get_recommendation(pred)


    current_log <- stress_log()
    new_entry <- data.frame(Time = format(Sys.time(), "%H:%M:%S"), Stress = as.numeric(pred))
    updated_log <- rbind(current_log, new_entry)
    stress_log(updated_log)

    # Text output
    output$result <- renderText({
      paste0("üß† Predicted Stress Level: ", pred, "\n\nüí¨ Recommendation:\n", rec)
    })

    # Chart output
    output$stress_chart <- renderPlotly({
      log_df <- stress_log()
      plot_ly(log_df, x = ~Time, y = ~Stress, type = 'scatter', mode = 'lines+markers',
              line = list(color = 'lightgreen'), marker = list(size = 8)) %>%
        layout(title = "üìä Stress Over Time",
               xaxis = list(title = "Time"),
               yaxis = list(title = "Stress Level", range = c(0, 10)))
    })
  })

 
  observeEvent(input$reset, {
    stress_log(data.frame(Time = character(), Stress = numeric(), stringsAsFactors = FALSE))
    output$result <- renderText({ "" })
    output$stress_chart <- renderPlotly({ NULL })
  })
}

# Launch
shinyApp(ui, server)
